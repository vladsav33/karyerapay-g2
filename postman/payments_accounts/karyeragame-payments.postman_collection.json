{
	"info": {
		"_postman_id": "30b6f3b7-980b-4b5a-900c-5f6054da33ee",
		"name": "karyeragame payments & accounts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26322094"
	},
	"item": [
		{
			"name": "add User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
							"pm.expect(target).to.have.property('token');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"nickname\": \"User_1\",\r\n\t\"email\": \"User_1@test.test\",\r\n\t\"password\" : 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/karyera-game/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"karyera-game",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "authentication User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"var tokenUser1 = data.token;\r",
							"console.log(tokenUser1);\r",
							"pm.collectionVariables.set(\"tokenUser1\", tokenUser1)\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
							"pm.expect(target).to.have.property('token');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"email\": \"User_1@test.test\",\r\n\t\"password\" : 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/karyera-game/auth/authenticate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"karyera-game",
						"auth",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "add User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
							"pm.expect(target).to.have.property('token');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"nickname\": \"User_2\",\r\n\t\"email\": \"User_2@test.test\",\r\n\t\"password\" : 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/karyera-game/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"karyera-game",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "authentication User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"var tokenUser2 = data.token;\r",
							"console.log(tokenUser2);\r",
							"pm.collectionVariables.set(\"tokenUser2\", tokenUser2)\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
							"pm.expect(target).to.have.property('token');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"email\": \"User_2@test.test\",\r\n\t\"password\" : 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/karyera-game/auth/authenticate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"karyera-game",
						"auth",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Account User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: id, type, name, userId, amount\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('type');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('userId');\r",
							"pm.expect(target).to.have.property('amount');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.userId).equal(target.userId, 'userId должен соответствовать отправленному в запросе');\r",
							"    pm.expect(source.type).equal(target.type, 'Тип счёта должен соответствовать отправленному в запросе');\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"PERSONAL\",\r\n\t\"name\": \"User_1\",\r\n\t\"userId\" : 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/accounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Account User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: id, type, name, userId, amount\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('type');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('userId');\r",
							"pm.expect(target).to.have.property('amount');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.userId).equal(target.userId, 'userId должен соответствовать отправленному в запросе');\r",
							"    pm.expect(source.type).equal(target.type, 'Тип счёта должен соответствовать отправленному в запросе');\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"PERSONAL\",\r\n\t\"name\": \"User_2\",\r\n\t\"userId\" : 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/accounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Account User 2 Type 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: id, type, name, userId, amount\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('type');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('userId');\r",
							"pm.expect(target).to.have.property('amount');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.userId).equal(target.userId, 'userId должен соответствовать отправленному в запросе');\r",
							"    pm.expect(source.type).equal(target.type, 'Тип счёта должен соответствовать отправленному в запросе');\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"CHAIRMAN_OF_GOVERNMENT\",\r\n\t\"name\": \"User_2\",\r\n\t\"userId\" : 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/accounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Account id1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Счёт должен содержать поля: id, type, name, userId, amount\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('type');\r",
							"    pm.expect(target).to.have.property('name');\r",
							"    pm.expect(target).to.have.property('userId');\r",
							"    pm.expect(target).to.have.property('amount');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8081/accounts/id/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"accounts",
						"id",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Account id2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Счёт должен содержать поля: id, type, name, userId, amount\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('type');\r",
							"    pm.expect(target).to.have.property('name');\r",
							"    pm.expect(target).to.have.property('userId');\r",
							"    pm.expect(target).to.have.property('amount');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8081/accounts/id/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"accounts",
						"id",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Account by Email User_2@test.test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = 'User_2@test.test';\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Счёт должен содержать поля: id, type, name, userId, amount\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('type');\r",
							"    pm.expect(target).to.have.property('name');\r",
							"    pm.expect(target).to.have.property('userId');\r",
							"    pm.expect(target).to.have.property('amount');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8081/accounts/email/User_2@test.test",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"accounts",
						"email",
						"User_2@test.test"
					]
				}
			},
			"response": []
		},
		{
			"name": "get All Account",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8081/accounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Payments 10 coins from account 1 to account 2",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"fromAccount\": 1,\r\n\t\"toAccount\": 2,\r\n\t\"amount\" : 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/payments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Payments 50.55 coins from account 1 to account 3",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"fromAccount\": 1,\r\n\t\"toAccount\": 3,\r\n\t\"amount\" : 50.55\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/payments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Payments 200 coins from account 2 to account 1",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"fromAccount\": 2,\r\n\t\"toAccount\": 1,\r\n\t\"amount\" : 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/payments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "get All Payments",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8081/payments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Payments by Email User_1@test.test",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUser1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8081/payments/email/User_1@test.test",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"payments",
						"email",
						"User_1@test.test"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "tokenUser1",
			"value": ""
		},
		{
			"key": "tokenUser2",
			"value": ""
		}
	]
}