{
	"info": {
		"_postman_id": "0f0056d3-e3d6-470e-8cbb-32f02c04597e",
		"name": "karyeragame",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26322094"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "add User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
									"pm.expect(target).to.have.property('token');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"nickname\": \"User_1\",\r\n\t\"email\": \"User_1@test.test\",\r\n\t\"password\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/karyera-game/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"karyera-game",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "authentication User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"var tokenUser1 = data.token;\r",
									"console.log(tokenUser1);\r",
									"pm.collectionVariables.set(\"tokenUser1\", tokenUser1)\r",
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
									"pm.expect(target).to.have.property('token');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"User_1@test.test\",\r\n\t\"password\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/karyera-game/auth/authenticate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"karyera-game",
								"auth",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "add User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
									"pm.expect(target).to.have.property('token');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"nickname\": \"User_2\",\r\n\t\"email\": \"User_2@test.test\",\r\n\t\"password\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/karyera-game/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"karyera-game",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "authentication User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"var tokenUser2 = data.token;\r",
									"console.log(tokenUser2);\r",
									"pm.collectionVariables.set(\"tokenUser2\", tokenUser2)\r",
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
									"pm.expect(target).to.have.property('token');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"User_2@test.test\",\r\n\t\"password\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/karyera-game/auth/authenticate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"karyera-game",
								"auth",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "add User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
									"pm.expect(target).to.have.property('token');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"nickname\": \"User_3\",\r\n\t\"email\": \"User_3@test.test\",\r\n\t\"password\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/karyera-game/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"karyera-game",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "get User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.nickname, 'Имя юзера не совпадает').equal('User_1');\r",
									"    pm.expect(target.email, 'email не совпадает').equal('User_1@test.test');\r",
									"       });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/user/id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"user",
								"id",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(\"User_2\").equal(target.nickname, 'Имя юзера не совпадает');\r",
									"    pm.expect('User_2@test.test').equal(target.email, 'email не совпадает');\r",
									"       });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/user/id/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"user",
								"id",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get User 1 by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.nickname, 'Имя юзера не совпадает').equal('User_1');\r",
									"    pm.expect(target.email, 'email не совпадает').equal('User_1@test.test');\r",
									"       });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/user/email/User_1@test.test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"user",
								"email",
								"User_1@test.test"
							]
						}
					},
					"response": []
				},
				{
					"name": "get User 2 by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect('User_2').equal(target.nickname, 'Имя юзера не совпадает');\r",
									"    pm.expect('User_2@test.test').equal(target.email, 'email не совпадает');\r",
									"       });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/user/email/User_2@test.test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"user",
								"email",
								"User_2@test.test"
							]
						}
					},
					"response": []
				},
				{
					"name": "get All User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"pm.expect(target.length, 'Ответ должен содержать 3 юзера').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect('User_1').equal(target[0].nickname, 'Имя юзера не совпадает');\r",
									"    pm.expect('User_1@test.test').equal(target[0].email, 'email не совпадает');\r",
									"       });\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect('User_2').equal(target[1].nickname, 'Имя юзера не совпадает');\r",
									"    pm.expect('User_2@test.test').equal(target[1].email, 'email не совпадает');\r",
									"       });\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect('User_3').equal(target[2].nickname, 'Имя юзера не совпадает');\r",
									"    pm.expect('User_3@test.test').equal(target[2].email, 'email не совпадает');\r",
									"       });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/user/all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "del User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.not.withBody;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/user/del/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"user",
								"del",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "get User 3 не найден",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/user/id/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"user",
								"id",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Games",
			"item": [
				{
					"name": "add Game 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Game_1\",\r\n\t\"description\" : \"Game_1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/games",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Game 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.adminEmail).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.description).equal(target.description, 'description должен соответствовать отправленному в запросе');\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Game_2\",\r\n\t\"description\" : \"Game_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/games",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Game 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.adminEmail).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя игры должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.description).equal(target.description, 'description должен соответствовать отправленному в запросе');\r",
									"    pm.expect(source.isAlive).equal(target.alive, 'isAlive должен соответствовать отправленному в запросе')\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Game_2_Update\",\r\n\t\"description\" : \"Game_2_Update\",\r\n    \"isAlive\" : false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/games/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"games",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Game 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: id\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(1).equal(target.id, 'id не совпадает');\r",
									"    pm.expect(\"Game_1\").equal(target.name, 'Имя игры не совпадает');\r",
									"    pm.expect(\"Game_1\").equal(target.description, 'description не совпадает');\r",
									"       });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/games/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"games",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get All Games",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать 2 игры\", function () {\r",
									"pm.expect(target.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Название первой игры\", function () {\r",
									"pm.expect(target[0].name, 'Название первой игры').to.eql('Game_1');\r",
									"});\r",
									"\r",
									"pm.test(\"Название второй игры\", function () {\r",
									"pm.expect(target[1].name, 'Название второй игры').to.eql('Game_2_Update');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/games",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Game 1 exist name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Game_1\",\r\n\t\"description\" : \"Game_1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/games",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Game 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 или 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Game_1\",\r\n\t\"description\" : \"Game_1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/games/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"games",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "add Account User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, typeOfAccount, name, userId, amount, isLocked\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('typeOfAccount');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('amount');\r",
									"pm.expect(target).to.have.property('isLocked');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect('User_1').equal(target.name, 'Имя пользователя должно соответствовать');\r",
									"    pm.expect(source.userId).equal(target.userId, 'userId должен соответствовать отправленному в запросе');\r",
									"    pm.expect(source.typeOfAccount).equal(target.typeOfAccount, 'Тип счёта должен соответствовать отправленному в запросе');\r",
									"    pm.expect(1000).equal(target.amount, 'Сумма должна соответствовать запросу');\r",
									"    pm.expect(false).equal(target.isLocked, 'должен false');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"gameId\": 1,\r\n    \"typeOfAccount\": \"PERSONAL\",\r\n\t\"userId\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Account User 1 CHAIRMAN_OF_GOVERNMENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, typeOfAccount, name, userId, amount, isLocked\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('typeOfAccount');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('amount');\r",
									"pm.expect(target).to.have.property('isLocked');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(\"CHAIRMAN_OF_GOVERNMENT - User_1\").equal(target.name, 'Имя пользователя должно соответствовать');\r",
									"    pm.expect(source.userId).equal(target.userId, 'userId должен соответствовать отправленному в запросе');\r",
									"    pm.expect(source.typeOfAccount).equal(target.typeOfAccount, 'Тип счёта должен соответствовать отправленному в запросе');\r",
									"    pm.expect(1000).equal(target.amount, 'Сумма должна соответствовать запросу');\r",
									"    pm.expect(false).equal(target.isLocked, 'должен false');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"gameId\": 1,\r\n    \"typeOfAccount\": \"CHAIRMAN_OF_GOVERNMENT\",\r\n\t\"userId\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Account User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, typeOfAccount, name, userId, amount, isLocked\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('typeOfAccount');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('amount');\r",
									"pm.expect(target).to.have.property('isLocked');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect('User_2').equal(target.name, 'Имя пользователя должно соответствовать');\r",
									"    pm.expect(source.userId).equal(target.userId, 'userId должен соответствовать отправленному в запросе');\r",
									"    pm.expect(source.typeOfAccount).equal(target.typeOfAccount, 'Тип счёта должен соответствовать отправленному в запросе');\r",
									"    pm.expect(1000).equal(target.amount, 'Сумма должна соответствовать запросу');\r",
									"    pm.expect(false).equal(target.isLocked, 'должен false');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"gameId\": 1,\r\n    \"typeOfAccount\": \"PERSONAL\",\r\n\t\"userId\" : 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Account id1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, typeOfAccount, name, userId, amount, isLocked\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('typeOfAccount');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('amount');\r",
									"pm.expect(target).to.have.property('isLocked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/accounts/id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts",
								"id",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Account id2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, typeOfAccount, name, userId, amount, isLocked\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('typeOfAccount');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('amount');\r",
									"pm.expect(target).to.have.property('isLocked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/accounts/id/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts",
								"id",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Account by Email User_2@test.test Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, typeOfAccount, name, userId, amount, isLocked\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('typeOfAccount');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('amount');\r",
									"pm.expect(target).to.have.property('isLocked');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect('User_2').equal(target.name, 'Имя пользователя должно соответствовать');\r",
									"    pm.expect(2).equal(target.userId, 'userId должен соответствовать отправленному в запросе');\r",
									"    pm.expect(\"PERSONAL\").equal(target.typeOfAccount, 'Тип счёта должен соответствовать отправленному в запросе');\r",
									"    pm.expect(1000).equal(target.amount, 'Сумма должна соответствовать запросу');\r",
									"    pm.expect(false).equal(target.isLocked, 'должен false');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/accounts/email/User_2@test.test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts",
								"email",
								"User_2@test.test"
							]
						}
					},
					"response": []
				},
				{
					"name": "get All Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
									"pm.expect(target.length, 'Ответ должен содержать 3 счета').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Название первого счета\", function () {\r",
									"pm.expect(target[0].name, 'Название первой счета').to.eql('User_1');\r",
									"});\r",
									"\r",
									"pm.test(\"Название второго счета\", function () {\r",
									"pm.expect(target[1].name, 'Название второй счета').to.eql('CHAIRMAN_OF_GOVERNMENT - User_1');\r",
									"});\r",
									"\r",
									"pm.test(\"Название третьего счета\", function () {\r",
									"pm.expect(target[2].name, 'Название третьей счета').to.eql('User_2');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Start amount",
			"item": [
				{
					"name": "add startAmount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"pm.expect(target.length, 'Ответ должен содержать 19 позиций').to.eql(19);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"ADMIN\",\r\n    \"startAmount\" : 999999999\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"PERSONAL\",\r\n    \"startAmount\" : 1000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"CHAIRMAN_OF_GOVERNMENT\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"TAX_INSPECTOR\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"POLICE\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"INSTITUTE\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"TREATMENT_HOUSEHOLD_SERVICE\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"LICENSING_INSPECTOR\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"LABOR_INSPECTOR\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"LABOR_EXCHANGE\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"MINISTER_OF_FOREIGN_TRADE\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"CENTRAL_BANK\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"FARM\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"MINING\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"MACHINERY_PLANT\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"COTTON_MILL\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"MALL\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"MINISTRY_OF_FOREIGN_TRADE\",\r\n    \"startAmount\" : 10000\r\n    },\r\n    {\r\n\t\"gameId\": 1,\r\n\t\"typeOfAccount\" : \"BANK\",\r\n    \"startAmount\" : 500000\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/startAmount",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"startAmount"
							]
						}
					},
					"response": []
				},
				{
					"name": "get StartAmounts by GameId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"pm.expect(target.length, 'Ответ должен содержать 19 позиций').to.eql(19);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/startAmount/id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"startAmount",
								"id",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get StartAmount by GameId and TypeOfAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"pm.expect(target.typeOfAccount, 'Тип счёта должен соответствовать').to.eql('BANK');\r",
									"pm.expect(target.startAmount, 'Сумма счёта должен соответствовать').to.eql(500000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/startAmount/id/1/type/BANK",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"startAmount",
								"id",
								"1",
								"type",
								"BANK"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "add Payments 10 coins from account 1 to account 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromAccount\": 1,\r\n\t\"toAccount\": 2,\r\n\t\"amount\" : 10,\r\n    \"description\" : \"платёж со чтёта 1, на счет 2, на сумму 10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/payments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Payments 50.55 coins from account 1 to account 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    // pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromAccount\": 1,\r\n\t\"toAccount\": 3,\r\n\t\"amount\" : 50.55,\r\n    \"description\" : \"платёж со чтёта 1, на счет 3, на сумму 50,55\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/payments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Payments 200 coins from account 2 to account 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    // pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromAccount\": 2,\r\n\t\"toAccount\": 1,\r\n\t\"amount\" : 200,\r\n    \"description\" : \"платёж со чтёта 2, на счет 1, на сумму 200\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/payments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "get All Payments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/payments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Payments by Email User_1@test.test",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/payments/email/User_1@test.test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"payments",
								"email",
								"User_1@test.test"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tokenUser1",
			"value": "",
			"type": "string"
		},
		{
			"key": "User1",
			"value": ""
		},
		{
			"key": "User2",
			"value": null,
			"type": "string"
		},
		{
			"key": "tokenUser2",
			"value": "",
			"type": "string"
		}
	]
}